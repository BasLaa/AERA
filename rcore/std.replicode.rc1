;std.replicode 
;mapping operator opcodes -> r-atoms 
!op (_now):ms 
!op (equ : :): 
!op (neq : :): 
!op (gtr :nb :nb): 
!op (lsr :nb :nb): 
!op (gte :nb :nb): 
!op (lse :nb :nb): 
!op (add : :): 
!op (sub : :): 
!op (mul :nb :nb):nb 
!op (div :nb :nb):nb 
!op (dis :nb :nb):nb 
!op (ln :nb):nb 
!op (exp :nb):nb 
!op (log :nb):nb 
!op (e10 :nb):nb 
!op (syn :): 
!op (ins : :[]): 
!op (app :[]): 
!op (red :[] :[]):[] 
!op (|red :[] :[]):[] 
!op (com :[] :[]):[] 
!op (spl :[] :[]):[] 
!op (mrg :[] :[]):[] 
!op (rpl :[] :[]):[] 
!op (ptc : :[]): 

;operator aliases 
!def now (_now) 

;mapping devices -> r-atoms 
!def exe <0x8A 0x0 0x0 0x0>; the executive. 

;mapping sub-systems -> r-atoms 
!def main <0x89 0x0 0x0 0x0>; the main sub-system. 

;mapping device functions -> r-atoms 
!def function_head {0x8B 0x00} 
!counter __function 0 
!def _inj <function_head __function>  
!def _eje <function_head __function>  
!def _rep <function_head __function>  ;mapping operator opcodes -> r-atoms 
!def _mod <function_head __function>  
!def _set <function_head __function>  
!def _new_class <function_head __function> 
!def _new_int <function_head __function>  
!def _del_class <function_head __function> 
!def _del_int <function_head __function>  
!def _bwd <function_head __function>  
!def _fwd <function_head __function>  
!def _ldc <function_head __function>  
!def _swp <function_head __function>  
!def _ntf <function_head __function>  
!def _new_sys <function_head __function>  
!def _del_sys <function_head __function>  
!def _new_obj <function_head __function>  
!def _new_dev <function_head __function>  
!def _del_dev <function_head __function>  
!def _new_spc <function_head __function>  
!def _del_spc <function_head __function>  
!def _new_prj <function_head __function> 
!def _del_prj <function_head __function>  
!def _mod_act <function_head __function>  
!def _mod_act_thr <function_head __function>  
!def _act_ <function_head __function>  
!def _sln_ <function_head __function> 
!def _del_ <function_head __function> 
!def _start <function_head __function> 
!def _suspend <function_head __function> 
!def _resume <function_head __function> 
!def _stop <function_head __function>  

;device functions aliases 
!def (CALL function device args) (cmd function device args 100 1 |ms |ms |sid |sid |[]) 

!def (inj args) (CALL _inj exe args) 
!def (eje args) (CALL cmd _eje exe args)  
!def (rep args) (CALL cmd _rep exe args)  
!def (mod args) (CALL cmd _mod exe args)  
!def (set args) (CALL cmd _set exe args)  
!def (new_class args) (CALL cmd _new_class exe args)  
!def (new_int args) (CALL cmd _new_int exe args)  
!def (del_class args) (CALL cmd _new_class exe args)  
!def (del_int args) (CALL cmd _del_int exe args)  
!def (bwd args) (CALL cmd _bwd exe args)  
!def (fwd args) (CALL cmd _fwd exe args)  
!def (ldc args) (CALL cmd _ldc exe args)  
!def (swp args) (CALL cmd _swp exe args)  
!def (ntf args) (CALL cmd _ntf exe args)  
!def (new_sys args) (CALL cmd _new_sys exe args)  
!def (del_sys args) (CALL cmd _del_sys exe args)  
!def (new_obj args) (CALL cmd _new_obj exe args)  
!def (new_dev args) (CALL cmd _new_dev exe args)  
!def (del_dev args) (CALL cmd _del_dev exe args)  
!def (new_spc args) (CALL cmd _new_spc exe args)  
!def (del_spc args) (CALL cmd _del_spc exe args)  
!def (new_prj args) (CALL cmd _new_prj exe args)  
!def (del_prj args) (CALL cmd _del_prj exe args)  
!def (mod_act args) (CALL cmd _mod_act exe args)  
!def (mod_act_thr args) (CALL cmd _mod_act_thr exe args)   

;various constants 
!counter __constant 0 

!def OFF __constant 
!def ON __constant 

;parameters for tuning the behavior of reactive objects 
;member sig 
!def SIGNAL_OFF __constant; disables signaling by the sub-system 
!def SIGNAL_ON __constant; enables signaling by the sub-system 
!def SILENT __constant; no notification upon production 
!def NOTIFY __constant; notification upon productions 
;member csm 
!def CONSUME __constant; inputs objects are consumed 
!def PASS __constant; input objects are passed to offsprings 

;parameter for sub-systems 
!def AUTO_EJECT_OFF __constant 
!def AUTO_EJECT_ON __constant 

;constants for _ntf 
!def INJ __constant 
!def EJE __constant 
!def MOD __constant 
!def SET __constant 
!def BWD __constant 
!def FWD __constant 
!def NEW_CLASS __constant 
!def DEL_CLASS __constant 
!def NEW_INT __constant 
!def DEL_INT __constant 
!def NEW_DEV __constant 
!def DEL_DEV __constant 
!def NEW_SPC __constant 
!def DEL_SPC __constant 
!def NEW_PRJ __constant 
!def DEL_PRJ __constant 
!def MOD_ACT __constant 
!def MOD_ACT_THR __constant 
!def _ACT __constant 
!def _SLN __constant 
!def _DEL __constant 
!def STOP __constant 

;mapping objects -> r-code 
!class (in_sec[] inputs:[] timings:[] guards:[]) 
!class (_obj :x res sln ijt ejt org hst :y mks) 
!class (head[] tpl:[] inputs:in_sec prods) 
!class (fun (_obj head:head nil)) 
!class (_react_obj (_obj {head:head act tsc csm sig nfc nfr} :x)) 
!class (pgm (_react_obj nil)) 
!class (|pgm (_react_obj nil)) 
!class (fmd (_react_obj cer:nb)) 
!class (imd (_react_obj cer:nb)) 
!class (_model_inputs initial_state:in_sec :x) 
!class (fmd_inputs[] (_model_inputs actions:in_sec)) 
!class (imd_inputs[] (_model_inputs target_state:in_sec)) 
!class (ptn skel: guards:[]) 
!class (|ptn skel: guards:[]) 
!class (prod_sub_sec[] guards:[] prods:[]) 
!class (gol tpl:[] (_obj target_state:head nil)) 
!class (|gol tpl:[] (_obj target_state:head nil)) 
!class (sys (_obj head:[ctr:head upr:nb spr:nb sinks auto_eject sln_thr act_thr sln_oor sln_boost sln_thr_boost sln_rlx_time act_oor act_boost act_thr_boost act_rlx_time sln_dec sln_dec_prd act_dec act_dec_prd sln_del_thr act_del_thr] act)) 
!class (int dest:sid src:sid sln:nb act:nb) 
!class (cmd (_obj head:[function:fid device:did args.[]] nil)) 
!class (ent (_obj nil nil)) 
!class (smr (_obj nil nil)) 
!class (dev sln:~nb act:~nb mks:[]) 

;mapping markers -> r-code 
!class (mk.pro (_obj {code: args:[]} nil)) 
!class (mk.xet (_obj {proc:mk.pro prod:[] dur:nb} nil)) 
!class (mk.hyp (_obj {data sim_run:smr} nil)) 
!class (mk.sim (_obj proc:mk.pro nil)) 
!class (mk.pre (_obj {data: cer:nb} nil)) 
!class (mk.isa (_obj {inst: class: cer:nb} nil)) 
!class (mk.position (_obj nil nil))
!class (mk.last_known (_obj nil nil))

