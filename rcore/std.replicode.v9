
;std.replicode

;mapping operator opcodes -> r-atoms
!def operator_head 0xAC
!counter __operator 0
!def _now <operator_head __operator 0x0>
!def equ <operator_head __operator 0x2>
!def neq <operator_head __operator 0x2>
!def gtr <operator_head __operator 0x2>
!def lsr <operator_head __operator 0x2>
!def gte <operator_head __operator 0x2>
!def lse <operator_head __operator 0x2>
!def add <operator_head __operator 0x2>
!def sub <operator_head __operator 0x2>
!def mul <operator_head __operator 0x2>
!def div <operator_head __operator 0x2>
!def dis <operator_head __operator 0x2>
!def ln <operator_head __operator 0x1>
!def exp <operator_head __operator 0x1>
!def log <operator_head __operator 0x1>
!def e10 <operator_head __operator 0x1>
!def syn <operator_head __operator 0x1>
!def ins <operator_head __operator 0x2>
!def app <operator_head __operator 0x2>
!def red <operator_head __operator 0x2>
!def |red <operator_head __operator 0x2>
!def com <operator_head __operator 0x2>
!def spl <operator_head __operator 0x1>
!def mrg <operator_head __operator 0x2>
!def rpl <operator_head __operator 0x2>
!def ptc <operator_head __operator 0x2>

;operator aliases
!def now (_now)
!def = equ
!def <> neq
!def > gtr
!def < lsr
!def <= gte
!def => lse
!def + add
!def - sub
!def * mul
!def \ syn

;mapping devices -> r-atoms
!def exe <0x8F 0x0 0x0 0x0>; the executive.

;mapping sub-systems -> r-atoms
!def main <0x8E 0x0 0x0 0x0>; the main sub-system.

;mapping device functions -> r-atoms
!def function_head {0x90 0x00}
!counter __function 0
!def _inj <function_head __function>
!def _eje <function_head __function>
!def _rep <function_head __function>
!def _mod <function_head __function>
!def _set <function_head __function>
!def _new_class <function_head __function>
!def _new_int <function_head __function>
!def _del_class <function_head __function>
!def _del_int <function_head __function>
!def _bwd <function_head __function>
!def _fwd <function_head __function>
!def _ldc <function_head __function>
!def _swp <function_head __function>
!def _ntf <function_head __function>
!def _new_sys <function_head __function>
!def _del_sys <function_head __function>
!def _new_obj <function_head __function>
!def _new_dev <function_head __function>
!def _del_dev <function_head __function>
!def _new_spc <function_head __function>
!def _del_spc <function_head __function>
!def _new_prj <function_head __function>
!def _del_prj <function_head __function>
!def _mod_act <function_head __function>
!def _mod_act_thr <function_head __function>
!def _act_ <function_head __function>
!def _sln_ <function_head __function>
!def _start <function_head __function>
!def _suspend <function_head __function>
!def _resume <function_head __function>
!def _stop <function_head __function>

;device functions aliases
!def inj {cmd _inj exe}
!def eje {cmd _eje exe}
!def rep {cmd _rep exe}
!def mod {cmd _mod exe}
!def set {cmd _set exe}
!def new_class {cmd _new_class exe}
!def new_int {cmd _new_int exe}
!def del_class {cmd _new_class exe}
!def del_int {cmd _del_int exe}
!def bwd {cmd _bwd exe}
!def fwd {cmd _fwd exe}
!def ldc {cmd _ldc exe}
!def swp {cmd _swp exe}
!def ntf {cmd _ntf exe}
!def new_sys {cmd _new_sys exe}
!def del_sys {cmd _del_sys exe}
!def new_obj {cmd _new_obj exe}
!def new_dev {cmd _new_dev exe}
!def del_dev {cmd _del_dev exe}
!def new_spc {cmd _new_spc exe}
!def del_spc {cmd _del_spc exe}
!def new_prj {cmd _new_prj exe}
!def del_prj {cmd _del_prj exe}
!def mod_act {cmd _mod_act exe}
!def mod_act_thr {cmd _mod_act_thr exe}
!def _act {cmd _act_ exe}
!def _sln {cmd _sln_ exe}

;various constants
!counter __constant 0

!def OFF 0
!def ON 1

;parameters for nfy

;parameters for new
!def CLASS __constant
!def INTERFACE __constant

;parameters for tuning the behavior of reactive objects
;member sig
!def SIGNAL_OFF __constant; disables signaling by the sub-system
!def SIGNAL_ON __constant; enables signaling by the sub-system
!def SILENT __constant; no notification upon production
!def NOTIFY __constant; notification upon productions
;member csm
!def CONSUME __constant; inputs objects are consumed
!def PASS __constant; input objects are passed to offsprings

;parameter for sub-systems
!def AUTO_EJECT_OFF __constant
!def AUTO_EJECT_ON __constant

;objects
!class (_obj :x res sln ijt ejt org hst :y mks); template class
!class (in_sec[] inputs timings guards)
!class (head[] tpl inputs:in_sec prods)
!class (fun (_obj head:head nil))
!class (_react_obj (_obj {head:head act tsc csm sig nfy} :x))
!class (pgm (_react_obj nil))
!class (|pgm (_react_obj nil))
!class (fmd (_react_obj cer))
!class (imd (_react_obj cer))
!class (_model_inputs initial_state:in_sec :x)
!class (fmd_inputs[] (_model_inputs actions:in_sec))
!class (imd_inputs[] (_model_inputs target_state:in_sec))
!class (ptn skel guards)
!class (|ptn skel guards)
!class (prod_sub_sec[] guards prods)
!class (gol tpl (_obj target_state:head nil))
!class (|gol tpl (_obj target_state:head nil))
!class (sys (_obj head:[ctr:head upr spr sinks drains auto_eject sln_thr act_thr sln_oor sln_boost sln_thr_boost sln_rlx_time act_oor act_boost act_thr_boost act_rlx_time sln_dec sln_dec_prd act_dec act_dec_prd sln_del_thr act_del_thr] act))
!class (int dest src sln act)
!class (cmd (_obj head:[function device args] nil))
!class (ent (_obj nil nil))
!class (smr (_obj nil nil))
!class (dev sln act mks)

;markers
!class (mk.pro (_obj {code args} nil))
!class (mk.xet (_obj {proc prod dur} nil))
!class (mk.hyp (_obj {data sim_run} nil))
!class (mk.sim (_obj proc nil))
!class (mk.pre (_obj {data cer} nil))
!class (mk.isa (_obj {inst class cer} nil))

