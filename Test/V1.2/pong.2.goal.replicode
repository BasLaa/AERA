; Similar to pong.1.replicode a debug combinations of CTPX, GTPX and PTPX; goal-driven
; Here the ball travels without walls at a constant speed

;;;;;;;;;;;;;
;; objects ;;
b:(ent 1)
[
[]; view
   SYNC_ONCE; sync (synchronization mode)
   now;       injection time
   1;         saliency
   forever;   resilience
   root;      group
   nil;       origin
]; Set of views
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b_is_a_ball:(mk.val b essence ball 1) |[]
; Even though (fact b_is_a_ball ::) is not used in this file, the pattern extractor needs it.
f_b_is_a_ball:(fact b_is_a_ball 0us MAX_TIME 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

;;;;;;;;;;;;;;;;;;;;;
;; Top-level model ;;

m_run_0:(mdl 
|[]; template arguments
[]; LHS and RHS patterns of the model
   (fact (mk.val b: position_y : :) t0: t1: ::); LHS
   (fact run t0: t1: ::);                 drive. RHS
|[]; forward guards
|[]; backward guards
[stdin drives]; output groups
1; strength of the model
1; number of evidences
1; success rate
0; derivative of the success rate
1; psln_tr (saliency change propagation threshold)
) [[SYNC_ONCE now 1 forever primary nil 1]]

;;;;;;;;;;;;;;;;;;;;;;
;; input generators ;;

; This program runs once to set the initial speed_y at 0.0001.
start:(pgm |[] |[] |[] []
   (prb [1 "print" "starting..." |[]])
   ; Set the initial speed in the external environment.
   (cmd set_speed_y [b 0.0001] 1)
   ; Debug: Inject a speed_y for b with SYNC_HOLD. This shouldn't be necessary.
   (inj []
      s:(mk.val b speed_y 0.0001 1)
      |[]
   )
   (inj []
      (fact s now MAX_TIME 1 1)
      [SYNC_HOLD now 1 forever stdin nil]
   )
1) |[]

istart:(ipgm start |[] RUN_ONCE sampling_period VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]
