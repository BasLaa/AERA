2020-01-05
* DONE? Solve real-time pong.2.goal crash.
  PrimaryMDLController::predict:1430
  PrimaryMDLController::assume_lhs:2113
  CTPX::build_requirement:996
  HLPOverlay::check_fwd_timings:180
  (ModelBase::MEntry::ComputeHashCode:135) Trigger with pong.discrete.cmd.external, cst_y2_minus with grab_hand
  BindingMap::match_fwd_timing:738
* DONE. Fix https://github.com/IIIM-IS/replicode/issues/42
* DONE. decompiled_objects "fact10" is different than fact with OID 10 in the trace.
  https://github.com/IIIM-IS/replicode/pull/44
* DONE. Try temporarily disabling assumptions. PrimaryMDLController::assume:2080
* DONE. pong.discrete.cmd.external: Why does m_y0_plus prediction fail?
  InputLessPGMOverlay::inject_productions:459 injects a (fact (cmd) ...) of zero duration.
  This is used as input to cst_y2_minus instead of the one injected by pgm_cmd_move_y_minus.
  BindingMap::match_timings:712 reduces (fact (icst cst_y2_minus)) to zero duration to match it.
  This makes the (fact (imdl m_y2_minus)) zero duration also.
  Therefore the prediction from the RHS of the model is also zero duration.
    (fact (pred (fact (mk.val p1 position y1 :) 0s:600ms:0us 0s:600ms:0us) ::) ::)
  The PMonitor calls _Fact::match_timings_overlap which fails if no overlap.
  Possible solutions:
    * NO: Make mdl ignore LHS duration and predict RHS with explicit duration. (Requires changing pattern extractor)
	* NO: Make inject_productions offset the instantaneous (fact (cmd ...)) into the future.
	* YES: Make inject_productions give (fact (cmd ...)) a duration.
	* NO: Move responsibility to inject (fact (cmd ...)) from inject_productions to the external environment.
	* NO: In _Fact::match_timings_overlap, special case when one interval is zero duration.
* DONE. Is the failed prediction from the assumption shielded from decreasing mdl confidence? No.

2020-01-09
* DONE. In replicode repository, create doc/meeting-notes.txt
* DONE. Add settings parameter "enable_assumptions". https://github.com/IIIM-IS/replicode/pull/45
* DONE. pong.discrete.cmd.external: From the drive, why doesn't m_y1_plus abduce goals for icst cst_y1_plus?
  Feb 2012: Major update to CSTController::reduce
  https://github.com/IIIM-IS/replicode/commit/3c5b9be5f935d6783fb1d35d74ca7d19ad4be186#diff-0ff725f0ae881cefbad0064fc2eac950R236
  Changed:
    Code *target = goal->get_reference(0)->get_reference(0);
	if (target->code(0).asOpcode() == Opcodes::ICST ...
  to:
    _Fact *goal_target=goal->get_reference(0);
	if (goal_target->code(0).asOpcode() == Opcodes::ICst ...
  There is a missing get_reference(0), so it never matches.
  Also, the following is clearly a bug, using the uninitialized bm:
    P<BindingMap> bm = new BindingMap(bm);
  Thus, the code to create goals from an abduced icst never ran after Feb 2012.
* DONE. HLPBindingMap::init_from_f_ihlp:1011 Fix to get the time stamp structure.
  https://github.com/IIIM-IS/replicode/pull/46
* Need CSTController::inject_goal:449 new View saliency 9999
  How does AERA choose among possible actions?

2020-01-17
* DONE. Make a pull request for the fix to CSTController::reduce. Merged.
  https://github.com/IIIM-IS/replicode/pull/47
* DONE. What was CSTController::inject_goal:449 resilience before the "big commmit" Feb 2012?
  There is code to compute the resilience, but seems to always use 1.
  https://github.com/IIIM-IS/replicode/blob/8260dc91c441c5b586663332741bd85242f3d2d9/r_exec/cst_controller.cpp#L92
  Should we try to use the duration until the goal's fact time stamp?
* DONE. In drive for y1 200ms later, why does it also eject cmd move_y_minus?
  Because extra move commands are ignored, but registered anyway, did a model learn wrongly from that? NO.
  The goal for (mk.val p1 position y1) also matches m_y2_minus, and cst_y2_minus
    abduces the goal (cmd move_y_minus [p1] :), even though position is not y2.
* DONE. Is replicode now making simulations?
  NO. In settings.xml, min_sim_time_horizon==max_sim_time_horizon==0.
  Will change max_sim_time_horizon.
* pong.2.goal.replicode model building.
  ASTController<U>::ASTController:89 target is the premise, i.e. the tpx' target to be "defeated".
  Fix typo in comment: https://github.com/IIIM-IS/replicode/commit/cde840d45a73c2826f7564d8a41b2732ed2ea88f
  CTPX::find_guard_builder "5 forms"
  InputLessPGMOverlay::inject_productions:461 Add GetTimeTolerance or use SYNC_HOLD so it can be a cause.

2020-01-21
* DONE pong.2.goal.replicode: Why does it need the initial speed_y?
  Because the patterns extractor CTPX::reduce needs a "cause", and this is the only fact available.
* CTPX::reduce: Discard inputs that don't share values with the consequent OR target.
  https://github.com/IIIM-IS/replicode/pull/48

2020-01-28
* DONE. Added "glue" output, e.g.
  fact (4652) imdl mdl 106 matches evidence fact (3962) imdl mdl 106
* Wrong: fact_130:(fact (icst cst_105 |[] [p1 y1 y1]) 0s:600ms:0us 0s:700ms:0us)
  Starts from consequent (fact y1_is_a_discrete_position1 0s:600ms:0us 0s:700ms:0us)

2020-01-31
* DONE. Finish gotcha: Documentation omits the 1 at the end of every object definition.
* CSTController::reduce:380 should ++o ? https://github.com/IIIM-IS/replicode/commit/fc5961a4fa9f44d40298381bbdf86f314a9f26ab#diff-0ff725f0ae881cefbad0064fc2eac950R318
* DONE: pong.discrete.cmd.external: When adding fact 119 to fact_127, why is patterns already down to 2 used members?
    Because CSTOverlay::get_offspring transfers(?) from patterns to inputs.
  When building fact 113 icst[96][ 102 108 109 111], why does it use all 4 inputs?
    Because it comes from CSTOverlay(1331) which was never an offspring.
    Why no prediction? Because job 466 deletes model 98, so fact_113 is not used.

2020-02-07
* DONE. Create pull request for CSTController::reduce:380 should ++o
  https://github.com/IIIM-IS/replicode/pull/49
* DEFER. Does replicode v1.1 instantiate a cst from partial inputs?
  Don't know. The code is too different, and can't find tests that use pattern extractor.
* DONE. Make pong.discrete.cmd.external build the same models in diagnostic time.
  CSTOverlay::reduce:277 if (inputs.size() == original_patterns_size) inject_production();
  Almost: mdl 122 makes unbound predictions, e.g. fact_171
* Does pong.discrete.cmd.external use the learned models to abduce from the drive?
  NO. PrimaryMDLController::abduce:1609 abduction_allowed(bm) == false
  Maybe partly due to the bug in scan_variable: https://github.com/IIIM-IS/replicode/pull/50
* DONE. Merge pull request https://github.com/IIIM-IS/replicode/pull/48

TODO
* In hand-coded model, why doesn't it (goal (fact (imdl)))?
* In hand-coded model, try m_y1_plus with variables needing binding. Does it (goal (fact (imdl)))?
* Is PTPX invoked when a prediction fails?
* In babbling, issue random goals for positions and an early (fact (success)). Is GTPX invoked?
* Merge pull request https://github.com/IIIM-IS/replicode/pull/50 ?
* Set max_sim_time_horizon to 5000000 us. See how behavior changes.
* Why does A/F choose the (fact (cmd ...)) injected by inject_productions over pgm_cmd_move_y_minus?
* Treat move commands at the same time step as impulses and have them accumulate?
* Issue #2: Try to reproduce.
* Issue #25: Reproduce running in real-time, and see if it happens in diagnostic time.
* Run pong.2.goal.replicode in real time and reproduce/isolate crash. Post issue. Depends on SYNC_PERIODIC change to SYNC_HOLD.
