; AGI-13 Summer School - AERA 6. Example by Eric Nivel.
; https://www.youtube.com/watch?v=LDbOHxUtVlU&t=5561
; A robotic arm is holding a cube and needs to put a sphere somewhere.
; It has only one hand; effectors: move, grab, release.
; ontology: essence ("is a"), position, attached.
; inputs: position, attached, efferent copies of commands.

attached:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
h:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
h_is_a_hand:(mk.val h essence hand 1) |[]
(fact h_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
c_is_a_cube:(mk.val c essence cube 1) |[]
(fact c_is_a_cube 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c_is_a_hand:(mk.val c essence hand 1) |[]
; This is needed for S3.
(|fact c_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
s:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
s_is_a_sphere:(mk.val s essence sphere 1) |[]
(fact s_is_a_sphere 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
s_is_a_hand:(mk.val s essence hand 1) |[]
; This is needed for S3.
(|fact s_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

; Internal state used by the programs to emulate the environment.
; (mk.val e1 emulator_state [Attached_obj Pos_h Pos_c Pos_s])
e1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
emulator_state:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
; Inject the emulator state into the emulator group.
emulator:(std_grp 2 0 0 0 |[]) [[SYNC_ONCE now 0 forever root nil COV_OFF 0]]

; This program runs in the primary group to re-inject any (fact (goal (fact (cmd ::)))) into emulator.
pgm_inject_in_emulator_group:(pgm |[]
[]
   (ptn f_G:(fact G:(goal (fact (cmd ::) ::) ::) ::) |[])
[]
   ; Only re-inject non-simulation goals.
   (= (is_sim G) false)
[]
   (inj [f_G [SYNC_ONCE (now) 1 1 emulator nil]])
1) |[]
(ipgm pgm_inject_in_emulator_group |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

; Hand H has position P.
S0:(cst |[]
[]
   (fact (mk.val H: essence hand :) T0: T1: : :); Changed X to hand.
   (fact (mk.val H: position P: :) T0: T1: : :)
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; When I move H by offset DeltaP, then H will be at position P1.
M0:(mdl [H: P0: T0: T1:]
[]
   (fact (cmd move [H: DeltaP:] :) T2: T1_cmd: : :); Change T1 to T1_cmd.
   (fact (mk.val H: position P1: :) T1_RHS: T3: : :); Change T1 to T1_RHS.
[]
   P1:(+ P0 DeltaP)
   T1_RHS:(+ T0 100ms)
   T3:(+ T1 100ms)
[]
   (<> P1 P0); Don't make a subgoal that doesn't change anything.
   DeltaP:(- P1 P0)
   T2:(- T1_RHS 80ms); Change 50ms delay to 20ms.
   T1_cmd:(- T3 100ms)
   T0:(- T1_RHS 100ms)
   T1:(- T3 100ms)
[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; If we observe state S0 (hand H has position P0), then if M0 predicts something (position P1) it will be right.
M1:(mdl |[]
[]
   (fact (icst S0 |[] [H: P0:] : :) T0: T1: : :)
   (fact (imdl M0 [H: P0: T0: T1:] [DeltaP: P1: T1_RHS: T3:] : :) T0: T1: : :); T2: is not exposed from M0. T1_RHS is also exposed.
|[]
|[]
[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; A thing C of kind X occupies position P. (Modified to exclude when C is a hand.)
S3:(cst |[]
[]
   (fact (mk.val C: essence X: :) T0: T1: : :)
   (fact (mk.val C: position P: :) T0: T1: : :)
   (|fact (mk.val C: essence hand :) T0: T1: : :); Don't duplicate S0, which is for hands.
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;; One hand H is at a position P and another thing C is at the same position and the hand is not attached to anything.
;S1:(cst |[]
;[]
;   (fact (icst S0 |[] [H: P:] : :) T0: T1: : :)
;   (fact (icst S3 |[] [C: X: P:] : :) T0: T1: : :); X is also exposed from S3.
;   (fact (mk.val H: attached |[] :) T0: T1: : :); Change anti-fact to fact of attached to |[].
;|[]
;|[]
;[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]
;
;; When the hand H is asked to grab whatever, then it will be attached to hand H.
;M2:(mdl [H: C: T0: T1:]
;[]
;   (fact (cmd grab [H:] :) T2: T1_cmd: : :); Change T1 to T1_cmd.
;   (fact (mk.val H: attached [C:] :) T1_RHS: T3: : :); Change T1 to T1_RHS.
;[]
;   T1_RHS:(+ T0 100ms); Copy from M0.
;   T3:(+ T1 100ms);     Copy from M0.
;[]
;   T2:(- T1_RHS 80ms);  Copy from M0.
;   T1_cmd:(- T3 100ms); Copy from M0.
;   T0:(- T1_RHS 100ms); Copy from M0.
;   T1:(- T3 100ms);     Copy from M0.
;[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]
;
;; M2 will work (something will be attached to hand H) if it is at the same position as hand H and it is not already attached.
;M3:(mdl |[]
;[]
;   (fact (icst S1 |[] [H: P: C: X:] : :) T0: T1: : :); X is also exposed from S1.
;   (fact (imdl M2 [H: C: T0: T1:] [T1_RHS: T3:] : :) T0: T1: : :); T2 is not exposed from M2. T1_RHS is also exposed.
;|[]
;|[]
;[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; Hand H and object C are at the same position P and they are already attached.
S2:(cst |[]
[]
   (fact (icst S0 |[] [H: P:] : :) T0: T1: : :)
   (fact (icst S3 |[] [C: X: P:] : :) T0: T1: : :); X is also exposed from S3.
   (fact (mk.val H: attached [C:] :) T0: T1: : :)
[]
   (<> C nil); Make sure the object C is not nil.
[]
   (<> C nil); Make sure the object C is not nil.
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

;; When my hand H is attached to a thing C and I release my hand, it is not attached anymore.
;M4:(mdl [H: C: T0: T1:]
;[]
;   (fact (cmd release [H:] :) T2: T1_cmd: : :); Change T1 to T1_cmd.
;   (fact (mk.val H: attached |[] :) T1_RHS: T3: : :); Change T1 to T1_RHS. Change anti-fact to fact of attached to |[].
;[]
;   T1_RHS:(+ T0 100ms); Copy from M0.
;   T3:(+ T1 100ms);     Copy from M0.
;[]
;   T2:(- T1_RHS 80ms);  Copy from M0.
;   T1_cmd:(- T3 100ms); Copy from M0.
;   T0:(- T1_RHS 100ms); Copy from M0.
;   T1:(- T3 100ms);     Copy from M0.
;[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]
;
;; M4 will work (some C will not be attached to hand H) if it is at the same position as hand H and it is already attached.
;M5:(mdl |[]
;[]
;   (fact (icst S2 |[] [H: P: C: X:] : :) T0: T1: : :); X is also exposed from S2.
;   (fact (imdl M4 [H: C: T0: T1:] [T1_RHS: T3:] : :) T0: T1: : :); T2 is not exposed from M2. T1_RHS is also exposed.
;|[]
;|[]
;[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; When model M0 fires the prediction of the next position P1 of hand H, something C will also be at the same position P1.
M6:(mdl [H: C: P0: T0: T1:]
[]
   (fact (imdl M0 [H: P0: T0_M0: T1_M0:] [DeltaP: P1: T1_RHS: T3:] : :) T0_cmd: T1_cmd: : :); Change timings from T1 T3 to T0_cmd T1_cmd. T2 is not exposed from M0. T1_RHS is also exposed. Distinguish T0_M0 and T1_M0.
   (fact (mk.val C: position P1: :) T1_RHS: T3: : :); Fix bug as explained: Change C to P1. Change T1 to T1_RHS.
[]
   T1_RHS:(+ T0 100ms); Repeat from M0.
   T3:(+ T1 100ms);     Repeat from M0.
[]
   T0_cmd:(- T1_RHS 100ms); Copy from M0, but subtract 100ms because the LHS is not a command.
   T1_cmd:(- T3 100ms);     Copy from M0.
   T0:(- T1_RHS 100ms);     Copy from M0.
   T1:(- T3 100ms);         Copy from M0.
   T0_M0:(- T1_RHS 100ms);  Duplicate T0.
   T1_M0:(- T3 100ms);      Duplicate T0.
[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; When some C is attached to hand H and the hand moves to position P1, then C will also be at P1.
M7:(mdl |[]
[]
   (fact (icst S2 |[] [H: P: C: X:] : :) T0: T1: : :); X is also exposed from S2.
   (fact (imdl M6 [H: C: P: T0: T1:] [T0_M0: T1_M0: DeltaP: P1: T1_RHS: T3:] : :) T0: T1: : :); M6 template needs P. T0_M0 T1_M0, DeltaP, P1 and T1_RHS are exposed. T2 is not exposed from M6.
|[]
|[]
[stdin] 1 1 1 1 1) [[SYNC_ONCE now 0 forever primary nil 1]]

!def pH0 25
!def pS0 0
!def pS1 15

; Execute babble pass A commands.
!def DRIVE_PASS1_START 800ms
!def DRIVE_PASS1_END (+ DRIVE_PASS1_START 400ms)
; Execute babble pass B commands.
!def DRIVE_PASS2_START (+ DRIVE_PASS1_END 1200ms)

; Initial conditions.
start:(pgm |[] |[] |[] []
   (inj []
      State:(mk.val e1 emulator_state [nil pS0 5 pS0] 1)
      |[]
   )
   (inj []
      (fact State After:(now) (+ After sampling_period) 1 1)
      [SYNC_PERIODIC now 1 1 emulator nil]
   )
1) |[]
(ipgm start |[] RUN_ONCE sampling_period VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

m_drive:(mdl |[] []
   ; The goal target timings are the same as the drive timings.
   (fact (mk.val s position pS1 1) T0: T1: 1 1)
   (fact run T0: T1: ::)
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

pgm_babbleA_1:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 100ms))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleA_1 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_2:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 200ms))
[]
   (inj []
      Command:(cmd release [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleA_2 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_3:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 300ms))
[]
   (inj []
      Command:(cmd move [h 5] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" |[]])
1) |[]
(ipgm pgm_babbleA_3 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_4:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 400ms))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleA_4 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_5:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 500ms))
[]
   (inj []
      Command:(cmd release [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleA_5 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_6:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 600ms))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleA_6 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_7:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt 700ms))
[]
   (inj []
      Command:(cmd move [h 20] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 20])" |[]])
1) |[]
(ipgm pgm_babbleA_7 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_inject_drive_pass1:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt DRIVE_PASS1_START))
   (< After (+ this.vw.ijt DRIVE_PASS1_END))
[]
   (inj []
      ; The end of the time interval will be used in m_drive as the end of the goal interval.
      f_run:(fact run After (+ Before 500ms) 1 1)
      |[]
   )
   (inj []
      G:(goal f_run self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive" |[]])
1) |[]
(ipgm pgm_inject_drive_pass1 |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_inject_drive_pass2:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt DRIVE_PASS2_START))
[]
   (inj []
      ; The end of the time interval will be used in m_drive as the end of the goal interval.
      f_run:(fact run After (+ Before 500ms) 1 1)
      |[]
   )
   (inj []
      G:(goal f_run self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive" |[]])
1) |[]
(ipgm pgm_inject_drive_pass2 |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_0:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 0us)))
[]
   (inj []
      Command:(cmd move [h 0.1] 1); Special case to invoke pgm_cmd_release_push_c.
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 0.1])" |[]])
1) |[]
(ipgm pgm_babbleB_0 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_1:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 100ms)))
[]
   (inj []
      Command:(cmd release [h] 1); Special case to invoke pgm_cmd_release_push_c.
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleB_1 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_2:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 200ms)))
[]
   (inj []
      Command:(cmd move [h -0.1] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 0.1])" |[]])
1) |[]
(ipgm pgm_babbleB_2 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_3:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 300ms)))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleB_3 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_4:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 400ms)))
[]
   (inj []
      Command:(cmd release [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleB_4 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_5:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 500ms)))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h]" |[]])
1) |[]
(ipgm pgm_babbleB_5 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_6:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 600ms)))
[]
   (inj []
      Command:(cmd release [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleB_6 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_7:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 700ms)))
[]
   (inj []
      Command:(cmd move [h 5] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" |[]])
1) |[]
(ipgm pgm_babbleB_7 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_8:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 800ms)))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleB_8 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_9:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 900ms)))
[]
   (inj []
      Command:(cmd release [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" |[]])
1) |[]
(ipgm pgm_babbleB_9 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_10:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 1000ms)))
[]
   (inj []
      Command:(cmd grab [h] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" |[]])
1) |[]
(ipgm pgm_babbleB_10 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleB_11:(pgm |[]
[]
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) |[])
[]
   (>= After (+ this.vw.ijt (+ DRIVE_PASS1_END 1100ms)))
[]
   (inj []
      Command:(cmd move [h 20] 1)
      |[]
   )
   (inj []
      f_Command:(fact Command After Before 1 1)
      |[]
   )
   (inj []
      G:(goal f_Command self nil 1)
      |[]
   )
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 20])" |[]])
1) |[]
(ipgm pgm_babbleB_11 |[] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_cmd_move_h_attached_c:(pgm |[]
[]
   (ptn (fact G:(goal (fact (cmd move [h DeltaP_in:] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [Attached_obj: Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Attached_obj c)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Limit DeltaP to +/- 20. Inject the fact that the command was executed.
   (inj []
      Command:(cmd move [h DeltaP:(min (max DeltaP_in -20) 20)] 1)
      |[]
   )
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; Move h by DeltaP. c moves with h.
   (inj []
      Next_state:(mk.val e1 emulator_state [Attached_obj Next_pos_h:(+ Pos_h DeltaP) Next_pos_h Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_move_h_attached_c from command:" [Command]])
1) |[]
(ipgm pgm_cmd_move_h_attached_c |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_move_h_attached_s:(pgm |[]
[]
   (ptn (fact G:(goal (fact (cmd move [h DeltaP_in:] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [Attached_obj: Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Attached_obj s)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Limit DeltaP to +/- 20. Inject the fact that the command was executed.
   (inj []
      Command:(cmd move [h DeltaP:(min (max DeltaP_in -20) 20)] 1)
      |[]
   )
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; Move h by DeltaP. s moves with h.
   (inj []
      Next_state:(mk.val e1 emulator_state [Attached_obj Next_pos_h:(+ Pos_h DeltaP) Pos_c Next_pos_h] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_move_h_attached_s from command:" [Command]])
   (prb [1 "print" "pgm_cmd_move_h_attached_s new s position:" [Next_state]])
1) |[]
(ipgm pgm_cmd_move_h_attached_s |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_move_h_not_attached:(pgm |[]
[]
   (ptn (fact G:(goal (fact (cmd move [h DeltaP_in:] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Limit DeltaP to +/- 20. Inject the fact that the command was executed.
   (inj []
      Command:(cmd move [h DeltaP:(min (max DeltaP_in -20) 20)] 1)
      |[]
   )
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; Move h by DeltaP.
   (inj []
      Next_state:(mk.val e1 emulator_state [nil (+ Pos_h DeltaP) Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_move_h_not_attached from command:" [Command]])
1) |[]
(ipgm pgm_cmd_move_h_not_attached |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_release_h:(pgm |[]
[]
   (ptn (fact G:(goal (fact Command:(cmd release [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [Attached_obj: Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= (is_sim G) false)
   (<> Attached_obj nil)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; h is now unattached.
   (inj []
      Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_release_h from command:" [Command]])
1) |[]
(ipgm pgm_cmd_release_h |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_release_h_not_attached:(pgm |[]
[]
   (ptn (fact G:(goal (fact Command:(cmd release [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (<> Pos_h 0.1); This is handled by pgm_cmd_release_push_c
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; h is still unattached.
   (inj []
      Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_release_h_not_attached from command:" [Command]])
1) |[]
(ipgm pgm_cmd_release_h_not_attached |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

; A special case during babbling to push c away from s so they can be grabbed.
pgm_cmd_release_push_c:(pgm |[]
[]
   (ptn (fact G:(goal (fact Command:(cmd release [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Pos_h 0.1); Special case.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; h is still unattached. Special case to push c.
   (inj []
      Next_state:(mk.val e1 emulator_state [nil Pos_h (+ Pos_c 5) Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_release_push_c from command:" [Command]])
1) |[]
(ipgm pgm_cmd_release_push_c |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_s:(pgm |[]
[]
   (ptn (fact G:(goal f_G:(fact Command:(cmd grab [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Pos_h Pos_s); For h to grab s, they must be at the same position.
   (<> Pos_h Pos_c); c is not at the position of h, so grab succeeds.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; We already checked that s is at the hand's position.
   (inj []
      Next_state:(mk.val e1 emulator_state [s Pos_h Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_s from command:" [f_G]])
1) |[]
(ipgm pgm_cmd_grab_h_s |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_c:(pgm |[]
[]
   (ptn (fact G:(goal (fact Command:(cmd grab [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Pos_h Pos_c); For h to grab c, they must be at the same position.
   (<> Pos_h Pos_s); s is not at the position of h, so grab succeeds.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; We already checked that c is at the hand's position.
   (inj []
      Next_state:(mk.val e1 emulator_state [c Pos_h Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_c from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_c |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_fail:(pgm |[]
[]
   (ptn (fact G:(goal (fact Command:(cmd grab [h] ::) Cmd_after: Cmd_before: ::) ::) ::) |[])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (= Pos_h Pos_s)
   (= Pos_h Pos_c); c and s are at the position of h, so grab fails.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; Both c and s are at the hand position, so grab fails.
   (inj []
      Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c Pos_s] 1)
      |[]
   )
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_fail from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_fail |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

; Match the emulator state and inject individual mk.val at the same time for each of
; the state variables as needed.
pgm_inject_mk_vals_attached:(pgm |[]
[]
   (ptn (fact (mk.val e1 emulator_state [Attached_obj: Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
[]
   (<> Attached_obj nil)
[]
   (inj []
      Val_attached:(mk.val h attached [Attached_obj] 1)
      |[]
   )
   (inj []
      (fact Val_attached After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_h:(mk.val h position Pos_h 1)
      |[]
   )
   (inj []
      (fact Val_pos_h After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_c:(mk.val c position Pos_c 1)
      |[]
   )
   (inj []
      (fact Val_pos_c After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_s:(mk.val s position Pos_s 1)
      |[]
   )
   (inj []
      (fact Val_pos_s After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
1) |[]
(ipgm pgm_inject_mk_vals_attached |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

; The same as pgm_inject_mk_vals_attached for the case when not attached.
pgm_inject_mk_vals_not_attached:(pgm |[]
[]
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c: Pos_s:] :) After: Before: ::) |[])
|[]
[]
   (inj []
      Val_attached:(mk.val h attached |[] 1)
      |[]
   )
   (inj []
      (fact Val_attached After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_h:(mk.val h position Pos_h 1)
      |[]
   )
   (inj []
      (fact Val_pos_h After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_c:(mk.val c position Pos_c 1)
      |[]
   )
   (inj []
      (fact Val_pos_c After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj []
      Val_pos_s:(mk.val s position Pos_s 1)
      |[]
   )
   (inj []
      (fact Val_pos_s After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
1) |[]
(ipgm pgm_inject_mk_vals_not_attached |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]
